{"version":3,"sources":["hoc/AuxWrap.js","components/layout/layout.js","components/Burger/BurguerIngredient/BurguerIngredient.js","components/Burger/Burguer.js","components/Burger/BuildControls/BuildControl/BuildControl.js","components/Burger/BuildControls/BuildControls.js","components/UI/Backdrop/Backdrop.js","components/UI/Modal/Modal.js","components/UI/Button/Button.js","components/Burger/OrderSummary/OrderSummary.js","containers/BurguerBuilder/BurguerBuilder.js","App.js","serviceWorker.js","index.js"],"names":["auxwrap","props","children","layout","className","BurguerIngredient","ingredient","this","type","Component","burguer","transformedIngredients","Object","keys","ingredients","map","igKey","Array","_","i","key","reduce","arr","el","concat","length","buildControl","label","onClick","removed","disabled","added","controls","buildControls","price","toFixed","ctrl","ingredientAdded","ingredientRemoved","ordered","purchasable","backdrop","show","clicked","modal","modalClosed","style","transform","opacity","button","btnType","orderSummary","ingredientsSummary","textTransform","purchaseCancelled","purchaseContinue","INGREDIENT_PRICES","salad","cheese","meat","bacon","BurguerBuilder","state","totalPrice","purchasing","addIngredientHandler","updatedCounted","updatedIngredients","priceAddition","newPrice","setState","updatePurchaseState","removeIngredientHandler","oldCount","priceDeduction","sum","acc","purchaseHandler","purchaseCancelledHandler","purchaseContinueHandler","alert","disabledInfo","OrderSummary","Burguer","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8d96ed76.chunk.js","sourcesContent":["const auxwrap = (props) => props.children;\n\nexport default auxwrap;","import React from 'react';\nimport Aux from '../../hoc/AuxWrap';\n\nimport './layout.scss'\n\nconst layout = (props) => (\n  <Aux>\n    <div className=\"content\">Toolbar, SideDrawer, Backdrop.</div>\n    <main>\n      {props.children}\n    </main>\n  </Aux>\n);\n\nexport default layout;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './BurgerIngredient.scss';\n\nclass BurguerIngredient extends Component {\n  \n\n  render() {\n\n    let ingredient = null;\n\n    switch (this.props.type) {\n      case ('bread-bottom'):\n        ingredient = <div className=\"BreadBottom\"></div>;\n        break;\n      case ('bread-top'):\n        ingredient = (\n          <div className=\"BreadTop\">\n            <div className=\"Seeds1\"></div>\n            <div className=\"Seeds2\"></div>\n          </div>\n        )\n        break;\n      case ('meat'):\n        ingredient = <div className=\"Meat\"></div>;\n        break;\n      case ('cheese'):\n        ingredient = <div className=\"Cheese\"></div>;\n        break;\n      case ('salad'):\n        ingredient = <div className=\"Salad\"></div>;\n        break;\n      case ('bacon'):\n        ingredient = <div className=\"Bacon\"></div>;\n        break;\n      default:\n        ingredient = null;\n    }\n    return ingredient;\n  }\n};\n\nBurguerIngredient.propTypes = {\n  type: PropTypes.string.isRequired\n};\n\n\n\n\nexport default BurguerIngredient;","import React from 'react';\nimport BurguerIngredient from './BurguerIngredient/BurguerIngredient';\nimport './burguer.scss';\n\nconst burguer = (props) => {\n\n  let transformedIngredients = Object.keys(props.ingredients)\n    .map(igKey => {\n      return [...Array(props.ingredients[igKey])].map((_, i) => {\n        return  <BurguerIngredient key={igKey + i} type={igKey} />\n      });\n    })\n    .reduce((arr, el) => {\n      return arr.concat(el);\n    }, []);\n\n  if (transformedIngredients.length === 0) {\n    transformedIngredients = <p>Please add some ingredients!</p>;\n  }\n  \n  return (\n    <div className=\"Burguer\">\n      <BurguerIngredient type=\"bread-top\"/>\n      {transformedIngredients}\n      <BurguerIngredient type=\"bread-bottom\"/>\n    </div>\n  )\n}\n\nexport default burguer;","import React from 'react';\nimport './BuildControl.scss';\n\nconst buildControl = (props) => (\n  <div className=\"BuildControl\">\n    <div className=\"Label\">{props.label}</div>\n    <button onClick={props.removed}  className=\"Less\" disabled={props.disabled}>Less</button>\n    <button onClick={props.added} className=\"More\">More</button>\n  </div>\n);\n\nexport default buildControl;","import React from 'react';\n\nimport './BuildControls.scss';\nimport BuildControl from './BuildControl/BuildControl';\n\nconst controls = [\n  { label: 'Salad', type: 'salad' },\n  { label: 'Cheese', type: 'cheese' },\n  { label: 'Bacon', type: 'bacon' },\n  { label: 'Meat', type: 'meat' }\n];\n\nconst buildControls = (props) => (\n  <div className=\"BuildControls\">\n    <p>Total Price: <strong>{props.price.toFixed(2)}</strong></p>\n    {controls.map(ctrl => {\n      return <BuildControl \n        added={() => props.ingredientAdded(ctrl.type)}\n        removed={() => props.ingredientRemoved(ctrl.type)}\n        key={ctrl.label} \n        label={ctrl.label} \n        disabled={props.disabled[ctrl.type]} />\n    })}\n    <button \n      type=\"button\" \n      className=\"OrderButton\"\n      onClick={props.ordered}\n      disabled={!props.purchasable}>ORDER NOW</button>\n  </div>\n);\n\nexport default buildControls;","import React from 'react';\nimport './Backdrop.scss';\n\nconst backdrop = (props) => (\n  props.show ? <div className=\"Backdrop\" onClick={props.clicked}></div> : null\n);\n \nexport default backdrop;","import React from 'react';\nimport './Modal.scss';\n\nimport Aux from '../../../hoc/AuxWrap';\nimport Backdrop from '../Backdrop/Backdrop';\n\nconst modal = (props) => (\n  <Aux>\n    <Backdrop show={props.show} clicked={props.modalClosed}/>\n    <div\n      style={\n        {\n          transform: props.show ? 'translateY(0)' : 'translateY(-100vh)',\n          opacity: props.show ? '1' : '0',\n        }\n      } \n      className=\"Modal\">\n      {props.children}\n    </div>\n    \n  </Aux>\n);\nexport default modal;","import React from 'react';\nimport './Button.scss';\n\nconst button = (props) => (\n  <button \n    className={`Button ${props.btnType}`} \n    onClick={props.clicked}>\n    {props.children}\n  </button>\n)\n \nexport default button;","import React from 'react';\nimport Aux from '../../..//hoc/AuxWrap';\nimport Button from '../../UI/Button/Button';\n\nconst orderSummary = (props) => { // Add curly braces when there is more than just JXS;\n  const ingredientsSummary = Object.keys(props.ingredients)\n    .map(igKey => {\n      return  (\n        <li key={igKey}>\n          <span style={{textTransform: 'captalize'}}>{igKey}:</span>{props.ingredients[igKey]}\n        </li>\n      )\n    });\n\n  return (\n    <Aux>\n      <h3>Your Order</h3>\n      <p>A delicious burger with the following ingredients:</p>\n      <ul>\n       {ingredientsSummary}\n      </ul>\n      <p><strong>Total Price: {props.price}</strong></p>\n      <p>Continue to checkout?</p>\n      <Button btnType=\"Danger\" clicked={props.purchaseCancelled}>Cancel</Button>\n      <Button btnType=\"Success\" clicked={props.purchaseContinue}>Continue</Button>\n    </Aux>\n  )\n};\n\nexport default orderSummary;","import React, { Component } from \"react\";\nimport Aux from \"../../hoc/AuxWrap\";\nimport Burguer from '../../components/Burger/Burguer';\nimport BuildControls from \"../../components/Burger/BuildControls/BuildControls\";\nimport Modal from \"../../components/UI/Modal/Modal\";\nimport OrderSummary from \"../../components/Burger/OrderSummary/OrderSummary\";\n\n\nconst INGREDIENT_PRICES = {\n  salad: 0.5,\n  cheese: 0.4,\n  meat: 1.3,\n  bacon: 0.7\n};\n\nclass BurguerBuilder extends Component {\n\n  state = {\n    ingredients: {\n      salad: 0,\n      bacon: 0,\n      cheese: 0,\n      meat: 0\n    },\n    totalPrice: 4,\n    purchasable: false,\n    purchasing: false\n  }\n\n  addIngredientHandler = (type) => {\n    const oldCount = this.state.ingredients[type];\n    const updatedCounted = oldCount + 1;\n\n    const updatedIngredients = {\n      ...this.state.ingredients\n    };\n    updatedIngredients[type] = updatedCounted;\n    const priceAddition = INGREDIENT_PRICES[type];\n    const oldPrice = this.state.totalPrice;\n    const newPrice = oldPrice + priceAddition;\n\n    this.setState({totalPrice: newPrice, ingredients: updatedIngredients});\n    this.updatePurchaseState(updatedIngredients);\n  }\n\n  removeIngredientHandler = (type) => {\n    const oldCount = this.state.ingredients[type];\n    const updatedCounted = oldCount > 0 ? oldCount - 1 : oldCount;\n\n    const updatedIngredients = {\n      ...this.state.ingredients\n    };\n    updatedIngredients[type] = updatedCounted;\n    const priceDeduction = INGREDIENT_PRICES[type];\n    const oldPrice = this.state.totalPrice;\n    const newPrice = oldPrice - priceDeduction;\n\n    this.setState({totalPrice: newPrice, ingredients: updatedIngredients});\n    this.updatePurchaseState(updatedIngredients);\n  }\n\n  updatePurchaseState = (ingredients) => {\n\n    const sum = Object.keys(ingredients)\n      .map(igKey => ingredients[igKey])\n      .reduce((acc, el) => acc + el, 0);\n\n    this.setState({purchasable: sum > 0});\n  }\n\n  purchaseHandler = () => {\n    this.setState({purchasing: true});\n  }\n\n  purchaseCancelledHandler = () => {\n    this.setState({purchasing: false});\n  }\n\n  purchaseContinueHandler = () => {\n    alert('You continue!');\n  }\n\n\n  render() {\n\n    const disabledInfo = {\n      ...this.state.ingredients\n    };\n\n    for (let key in disabledInfo) {\n      disabledInfo[key] = disabledInfo[key] <= 0;\n    }\n\n    return (\n      <Aux>\n        <Modal show={this.state.purchasing} modalClosed={this.purchaseCancelledHandler}>\n          <OrderSummary \n            ingredients={this.state.ingredients}\n            price={this.state.totalPrice.toFixed(2)}\n            purchaseCancelled={this.purchaseCancelledHandler}\n            purchaseContinue={this.purchaseContinueHandler} />\n        </Modal>\n        <Burguer ingredients={this.state.ingredients}/>\n        <BuildControls\n          price={this.state.totalPrice}\n          ingredientRemoved={this.removeIngredientHandler}\n          ingredientAdded={this.addIngredientHandler}\n          purchasable={this.state.purchasable}\n          ordered={this.purchaseHandler}\n          disabled={disabledInfo}/>\n      </Aux>\n    )\n  }\n}\n\nexport default BurguerBuilder;","import React, { Component } from 'react';\nimport './App.scss';\nimport Layout from './components/layout/layout';\nimport BurguerBuilder from '../src/containers/BurguerBuilder/BurguerBuilder';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Layout>\n          <BurguerBuilder></BurguerBuilder>\n        </Layout>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}